import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

const Login = () => {
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô login, email, otp
  const [step, setStep] = useState("login");
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const [email, setEmail] = useState("");
  const [otp, setOtp] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const navigate = useNavigate();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    const isLoggedIn =
      localStorage.getItem("isLoggedIn") === "true" ||
      sessionStorage.getItem("isLoggedIn") === "true";
    if (isLoggedIn) {
      navigate("/"); // ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
    }
  }, [navigate]);

  // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username/password ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
  const handleLoginSubmit = (e) => {
    e.preventDefault();
    setErrorMessage("");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ)
    if (username === "momin" && password === "123") {
      setStep("email"); // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÑ‡∏õ‡∏Å‡∏£‡∏≠‡∏Å email ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ OTP
    } else {
      setErrorMessage("Invalid login credentials!");
    }
  };

  // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 2: ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏ó‡∏µ‡πà email (fetch API ‡πÉ‡∏ä‡πâ path ‡πÅ‡∏ö‡∏ö relative)
  const handleEmailSubmit = async (e) => {
    e.preventDefault();
    setErrorMessage("");

    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å backend API /api/send-otp (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á proxy ‡πÉ‡∏ô vite.config.js)
      const res = await fetch("/api/send-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      if (res.ok) {
        setStep("otp"); // ‡∏ñ‡πâ‡∏≤ backend ‡∏ï‡∏≠‡∏ö OK ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏Å‡∏£‡∏≠‡∏Å OTP
      } else {
        setErrorMessage("Failed to send OTP. Please check your email.");
      }
    } catch (err) {
      setErrorMessage("Server error. Please try again later.");
    }
  };

  // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
  const handleOtpSubmit = async (e) => {
    e.preventDefault();
    setErrorMessage("");

    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å backend API /api/verify-otp
      const res = await fetch("/api/verify-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, otp }),
      });

      if (res.ok) {
        // ‡∏ñ‡πâ‡∏≤ OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ï‡∏≤‡∏° rememberMe
        if (rememberMe) {
          localStorage.setItem("isLoggedIn", "true");
        } else {
          sessionStorage.setItem("isLoggedIn", "true");
        }
        navigate("/"); // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
      } else {
        setErrorMessage("Invalid OTP. Please try again.");
      }
    } catch (err) {
      setErrorMessage("Server error. Please try again later.");
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gradient-to-br from-blue-50 to-green-50">
      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô */}
      {step === "login" && (
        <form
          onSubmit={handleLoginSubmit}
          className="w-full max-w-md p-8 bg-white shadow-lg rounded-xl"
        >
          <h2 className="text-3xl font-bold mb-6 text-center">üîê Login</h2>
          <div className="mb-4">
            <label htmlFor="username" className="block text-lg font-semibold mb-2">
              Username
            </label>
            <input
              type="text"
              id="username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg"
              required
            />
          </div>
          <div className="mb-6">
            <label htmlFor="password" className="block text-lg font-semibold mb-2">
              Password
            </label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg"
              required
            />
          </div>
          <div className="flex items-center mb-6">
            <input
              type="checkbox"
              id="rememberMe"
              checked={rememberMe}
              onChange={() => setRememberMe(!rememberMe)}
              className="mr-2"
            />
            <label htmlFor="rememberMe" className="text-lg">
              Remember Me
            </label>
          </div>
          {errorMessage && (
            <div className="mb-4 text-red-500 text-center">{errorMessage}</div>
          )}
          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700"
          >
            Login
          </button>
        </form>
      )}

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å email ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á OTP */}
      {step === "email" && (
        <form
          onSubmit={handleEmailSubmit}
          className="w-full max-w-md p-8 bg-white shadow-lg rounded-xl"
        >
          <h2 className="text-3xl font-bold mb-6 text-center">üìß Enter Email for OTP</h2>
          <div className="mb-6">
            <label htmlFor="email" className="block text-lg font-semibold mb-2">
              Email
            </label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg"
              required
            />
          </div>
          {errorMessage && (
            <div className="mb-4 text-red-500 text-center">{errorMessage}</div>
          )}
          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700"
          >
            Send OTP
          </button>
        </form>
      )}

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å OTP */}
      {step === "otp" && (
        <form
          onSubmit={handleOtpSubmit}
          className="w-full max-w-md p-8 bg-white shadow-lg rounded-xl"
        >
          <h2 className="text-3xl font-bold mb-6 text-center">üî¢ Enter OTP</h2>
          <div className="mb-6">
            <label htmlFor="otp" className="block text-lg font-semibold mb-2">
              OTP Code
            </label>
            <input
              type="text"
              id="otp"
              value={otp}
              onChange={(e) => setOtp(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg"
              required
            />
          </div>
          {errorMessage && (
            <div className="mb-4 text-red-500 text-center">{errorMessage}</div>
          )}
          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700"
          >
            Verify OTP
          </button>
        </form>
      )}
    </div>
  );
};

export default Login;
